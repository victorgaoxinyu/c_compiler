## Laxical Analysis
- strings -> tokens
- tokens
	- types
	- value
- Lexer

```
int main()
{
	int x = 50;
}

# tokens
<keyword, "int">
<identifier, "main">
<operator, "(">
...
```

Token types in our Compiler
- TOKEN_TYPE_IDENTIFIER
- TOKEN_TYPE_KEYWORD
- TOKEN_TYPE_OPERATOR
- TOKEN_TYPE_SYMBOL
- TOKEN_TYPE_NUMBER
- TOKEN_TYPE_STRING
- TOKEN_TYPE_COMMENT
- TOKEN_TYPE_NEWLINE

'(' and '[' are operators while ')' and ']' are symbol.

### Creating a number token
- Need to revisit this section once fixed gdb bug

#### Some gdb commands

```c
print *(struct token*)vector_at(lex_process->token_vec, )
// vector count
print vector_count(process->token_vec)
// set the peek pointer to the start
print vector_set_peek_pointer(process->token_vec, )
```



# Parsing

take token -> abstract syntax tree 

easier to iterate through a tree

```
int main()
{
	int x = 50;
}

// tree
function_node: main
|--body_node: body
|  |--variable_node: x
|      |--number_node: 50
|--vector_arguments
```

Why are parsers important

- provide structure for an input file
- nodes can branch off from each other providing stability in logic
- makes it easier to validate the code
- easier to compile the input file

#### Some gdb commands

```shell
print **(struct node**)(vector_back(process->node_vec))\
print *node_peek()
print *node_peek()->exp.left

step // step into the function
```



**need revise p28**

# Scope

Scope example

```c
int d;                    // Global Scope - Variable d
int main(int z)           // Function arguments scope - Variable Z
{
	int a;                // Function body scope - Variable A, B
	int b
}
```



Structure scopes

- struct bodies will have their own scopes that will have no parents
- resolver will deal with it

# Symbols

- functions we have identified during the compile process
- structures we have identified during the compile process
- global variables



Rules

- should never share the same name



### Some GDB commands

```c
print vector_count(node->var.type->array->brackets->n_brackets)

```



## Calculating Array Sizes

```c
int x[50]; // sizeof(int) * 50 -> 4 * 50
int y[30][20]; // sizeof(int) * 30 * 20 -> 4 * 30 * 20
char e[40][10][20]; // sizeof(char) * 40 * 10 * 20 -> 1 * 40 * 10 * 20 
```



## Padding and Alignment

CPU I/O operations for 32 bit systems

- push pop instructions use 4 bytes at a time
- Memory access is preformed on boundaries of 4 bytes.



How to solve the problem of loading two words?

- align our data so it fits into a 4 byte boundary.
- Pad NULL bytes at the end of an unaligned variable forcing it to be aligned.

 

Unaligned structure example

```c
struct dog
{
	int x;
	char e;
	char d;
	int dd;
} __attribute__((packed));

/**
* Memory address
* variable x: 0-3
* variable e: 4
* variable d: 5
* variable dd: 6-9
*/
```

Aligned structure example

```c
// Same struct as above

/**
* Memory address
* variable x: 0-3
* variable dd: 4 -7
* variable e: 8
* variable d: 9
*/
```

Padding example

```c
struct dog
{
	int x;
	char e;
	char d;
	char pad[2]; // compiler added this
    int dd;
}

sizeof(struct dog) = 8 bytes
```



## Scope offsets

- Scope offsets are offsets relative to the EBP(Base Pointer) or ESP(Stack Pointer)
- Scope offsets can offset upwards and downwards
- Accessing local variables causes us to access an offset in the negative region
- Accessing function arguments causes us to access an offset in a positive region

#### Function argument scope access

```assembly
int test(int x, int y)
{
	x = 50;
	y = 20;
}

// 
test:
	push ebp
	move ebp, esp
	move DWORD PTR [ebp+8], 50
	move DWORD PTR [ebp+12], 20
	nop
	pop ebp
	ret

/* call function */
test(50, 30)

main:
	push ebp
	move ebp,
	push 30   /* push backward to the stack, first 30, then 50 */
	push 50
	call test
	add esp, 8
	move eax, 0
	leave
	ret
	
```

#### Local variable scope access

````assembly
int test(int x, int y)
{
	int d = 20;
	int e = 30;
}

test:
	push ebp
	mov ebp, esp
	sub esp, 16                /* make room for variable, and align to 16 byte*/
	mov DWORD PTR [ebp-4], 20  
	mov DWORD PTR [ebp-8], 30
	nop
	leave
	ret

/*
Stack Frame
	0x1000 - Return Address
	0x0FFC - Old EBP
	EBP = ESP(0x0FFC)
	0x0FF8 - 0x0FFB (d > ebp - 4) (4 bytes)  first decrement, and then write increamently
	0x0FF4 - 0x0FF7 (e > ebp - 8) (4 bytes)
*/

````

#### Structure global variable access

````assembly
struct dog
{
	int a;
	char b;
	char c;
};

struct dog d;  /* struct is not within the scope, but gloabl */
int main()
{
	d.a = 50;
	d.b = 30;
	d.c = 60;
}

/* assembly */
d:
	.zero 8
main:
	push ebp
	mov ebp, esp
	mov DWORD PTR d, 50
	mov BYTE PTR d+4, 30
	mov BYTE PTR d+5, 60
	mov eax, 0
	pop ebp
	ret

````

#### Structure Scope variable access

```assembly
int main()
{
	struct dog d;
	d.a = 50;
	d.b = 30;
	d.c = 60;
}

/* assembly */
main:
	push ebp
	mov ebp, esp
	sub esp, 16
	mov DWORD PTR [ebp-8], 50
	mov BYTE PTR [ebp-4], 30
	mov BYTE PTR [ebp-3], 60
	mov eax, 0
	leave
	ret

/* Calculate structure offset for local scope */
struct dog
{
	int a;  // dog+0
	char b; // dog+4
	char c; // dog +5
}

/*
Take size of dog structure
sizeof(struct dog) = 8
Variable "a" = 0-8 = EBP-8
Variable "b" = 4-8 = EBP-4
Variable "c" = 5-8 = EBP-3 
*/

```
## Functions

have:
- arguments
- scopes
- names and it is unique
  - in C, we cannot overload, but can in CPP
- can return data

attr of function structure
- flags
  - special flags
    - function_node_flag_is_native:
      - means that the given function only exist in compiler, like a macro
- return datatype
- function arguments
  - var node stored in a vector
- function body
- stack size

**Re-Check**
- check 72, why add DATA_SIZE_DWORD to func.args.stack_addition

